{
  "name": "linqnode",
  "version": "1.0.0",
  "description": "A tiny, unobtrusive, elegant LINQ implementation.",
  "main": "linqnode.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "^2.3.3"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dbonev/linqnode.git"
  },
  "keywords": [
    "LINQ",
    "C#"
  ],
  "author": {
    "name": "Dimitar Bonev"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/dbonev/linqnode/issues"
  },
  "homepage": "https://github.com/dbonev/linqnode#readme",
  "readme": "# linqnode\nA minimalistic, simple, javascript LINQ library.\nThe core, essential LINQ functionality C# developers are used to in a clean, minimal, unobtrusive and tiny (less than 200 lines of code) library.\nThis library includes only the very basic, and most widely used parts (where, select, order by, then by).\nAll iterators use delayed execution (the collection is _not_ iterated until you call to_list() or forEach()).\n\nUsage:\n```\nvar linq = require('../linqnode');\n// let's have a data structure\nvar cars = [\n\t{\n\t\tMake: \"Toyota\",\n\t\tModel: \"Avensis\",\n\t\tYear: 2008\n\t},\n\t{\n\t\tMake: \"Mazda\",\n\t\tModel: \"6\",\n\t\tYear: 2009\n\t},\n\t{\n\t\tMake: \"Mazda\",\n\t\tModel: \"6\",\n\t\tYear: 2011\n\t},\n\t{\n\t\tMake: \"Mazda\",\n\t\tModel: \"3\",\n\t\tYear: 2010\n\t},\n\t{\n\t\tMake: \"Mazda\",\n\t\tModel: \"3\",\n\t\tYear: 2009\n\t}\n];\n// optionally, linqify it (this will give you .where / .select and friends functions within the datastructure)\n// if you prefer, simply call the equivalent linq.<method>(structure, ..) methods.\nlinq.linqify(cars);\n\n// filter, order, select with delayed execution\nvar mazda_cars = cars\n\t\t\t\t.where(function(car) { return car.Make === \"Mazda\"; })\n\t\t\t\t.order_by(function(car) { return car.Model; })\n\t\t\t\t.then_by_desc(function(car) { return car.Year; })\n\t\t\t\t.select(function(car) { return { CarModel: car.Model, YearOfModel: car.Year, CarMake: \"MAZDA\" }})\n\t\t\t\t.to_list();\n\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "4a919273fd54ecc5acf4cb56ff7c7ef0b073661d",
  "_id": "linqnode@1.0.0",
  "_shasum": "47b0e7d1a1e2d35aaea83c55e6742e52287834ea",
  "_from": "linqnode@*"
}
